#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Utkarsh";
const char* password = "12345678";

// GitHub raw content server
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;

// Updated path to the file "try1" in your GitHub repo
const char* url = "/Utkarshpashine/Try1/main/Try2";

// File storage path in SPIFFS
#define FILE_PATH "/downloaded_Try2.txt"
#define BUFFER_SIZE 2048

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected.");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed!");
    while (1);
  }

  // Remove old file if it exists
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Create a secure client (without certificate verification)
  WiFiClientSecure client;
  client.setInsecure();  // Insecure mode for testing

  Serial.print("Connecting to ");
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("‚ùå Connection failed!");
    while (1);
  }

  // Send GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Failed to open file for writing!");
    while (1);
  }

  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  // Read data and write to SPIFFS
  while (client.connected() || client.available()) {
    int len = client.available();
    if (len > 0) {
      int readBytes = client.read(buffer, min(len, BUFFER_SIZE));
      if (readBytes > 0) {
        int written = file.write(buffer, readBytes);
        if (written != readBytes) {
          Serial.println("‚ùå Write error!");
          break;
        }
        total += readBytes;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Calculate speed
  unsigned long duration = millis() - start;
  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println("‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}

  float speed = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("‚úÖ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speed);
  if (speed >= 400) {
    Serial.println("üéâ Passed: ‚â• 400 KBps achieved!");
  } else {
    Serial.println(‚ö†Ô∏è Below target speed.");
  }
}

void loop() {
  // Nothing to do here
}
