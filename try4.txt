#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "SPIFFS.h"

// WiFi credentials
const char* ssid = "Amul Thantharate 2.4G";
const char* password = "20002000";

// GitHub raw content URL
const char* host = "raw.githubusercontent.com";
const int httpsPort = 443;
const char* url = "/Utkarshpashine/Try1/main/try3"; // File must exist

#define FILE_PATH "/downloaded_try3.txt"
#define BUFFER_SIZE 4096 // Can adjust if needed

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Starting SPIFFS file download test...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("📡 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected!");

  // Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS mount failed. Restart required.");
    return;
  }

  // Check available SPIFFS space
  size_t freeSpace = SPIFFS.totalBytes() - SPIFFS.usedBytes();
  Serial.printf("🗃️ SPIFFS Free Space: %d bytes\n", freeSpace);
  if (freeSpace < 2 * 1024 * 1024) { // Ensure enough room for 2MB file
    Serial.println("⚠️ Not enough space in SPIFFS!");
    return;
  }

  // Remove existing file
  if (SPIFFS.exists(FILE_PATH)) {
    SPIFFS.remove(FILE_PATH);
  }

  // Setup HTTPS client
  WiFiClientSecure client;
  client.setInsecure(); // Skips certificate validation (for testing only)

  Serial.printf("🌐 Connecting to %s ...\n", host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("❌ Connection to host failed!");
    return;
  }

  // Send HTTP GET request
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: ESP32\r\n" +
               "Connection: close\r\n\r\n");

  // Skip HTTP headers
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r" || line.length() == 0) break;
  }

  // Open file for writing
  File file = SPIFFS.open(FILE_PATH, FILE_WRITE);
  if (!file || !file.availableForWrite()) {
    Serial.println("❌ Failed to open file for writing!");
    client.stop();
    return;
  }

  // Start reading and writing
  uint8_t buffer[BUFFER_SIZE];
  size_t total = 0;
  unsigned long start = millis();

  while (client.connected() || client.available()) {
    int available = client.available();
    if (available > 0) {
      int bytesRead = client.read(buffer, min(available, BUFFER_SIZE));
      if (bytesRead > 0) {
        int written = file.write(buffer, bytesRead);
        if (written != bytesRead) {
          Serial.println("❌ Write error! Written != read.");
          break;
        }
        total += bytesRead;
      }
    }
    delay(1); // Prevent watchdog reset
  }

  file.close();
  client.stop();

  // Speed calculation
  unsigned long duration = millis() - start;
  float speedKBps = (total / 1024.0) / (duration / 1000.0);

  Serial.printf("✅ Download complete: %d bytes in %lu ms (%.2f KBps)\n", total, duration, speedKBps);
  if (speedKBps >= 400) {
    Serial.println("🎉 Passed: ≥ 400 KBps achieved!");
  } else {
    Serial.println("⚠️ Below target speed.");
  }
}

void loop() {
  // Nothing in loop
}
