
a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.


a.	Bogie Segmentation: The individual segments are interconnected with a free pivot point, acting like a suspension system of the mechanism, providing greater stability.

b.	Differential (Four-Geared System): The differential is a four-gear system that provides stability to the main chassis by dividing movement from one bogie segment to another, increasing contact between wheels and ground.

c.	Swerve Drive: A swerve drive is used to provide free movement to wheels in all axes.

 JUSTIFICATION FOR THE USED MECHANISM:
1.	Stability: The six-wheel design and the differential system ensure that the vehicle remains stable, even when traversing over uneven terrain. The differential also helps to distribute the load evenly across all wheels, reducing the risk of tipping over.

2.	Mobility: The swerve drive allows for free movement of the wheels in all axes, enhancing the vehicle’s movements. This is particularly useful in navigating around obstacles or through tight spaces.

3.	Shock Absorption: The interconnected segments with free pivot points act like a suspension system, absorbing shocks from the terrain and providing a smoother ride.
4.	Efficiency: The Rocker Bogie mechanism is efficient in terms of energy usage, as it allows for smooth movement with minimal resistance.










ELECTRONICS SUBSYSTEM

1. Motor Driver
Component Used: MDD10A Dual Motor Driver
Function: Controls the direction and speed of the DC motors driving the rover’s wheels.
Features: Supports up to 10A continuous current per channel.
Provides precise speed control using PWM signals.
Enables independent wheel control for effective differential steering.
Integration: Receives PWM signals from the ESP32 microcontroller for directional and speed commands.

2. Power Supply
Component Used: 11.1V Li-Po Battery (3S)
Function: Supplies power to the motors, controllers, sensors, and communication modules.
Features: High energy density with a lightweight profile ideal for mobile robotic applications.
Power is regulated to 5v and 3.3v using DC-DC converters to meet the requirements of different subsystems.
Distribution: Direct high current supply to the motor driver.
Regulated lines for Raspberry Pi 5, ESP32, and sensors.
Safety: Includes fuses, current limiting, and voltage regulation to ensure protection and stable operation.

3. Controller
Components Used: ESP32 and Raspberry Pi 5
ESP32: Handles real-time hardware-level control such as motor actuation, and local sensor data handling.
Communicates with the ROS2 network via Micro-ROS over UDP.
Raspberry Pi 5: Serves as the primary computing platform for high-level tasks like SLAM, autonomous navigation (Nav2), and vision processing. Runs ROS2, manages sensor fusion (LiDAR, OAK-D Lite), and issues navigation commands to ESP32.
Coordination: The ESP32 handles time-sensitive tasks, while the Raspberry Pi 5 processes complex perception and planning algorithms.

4. Communication
Components Used: NRF24L01 and TS832 (FPV Module)
NRF24L01: Facilitates low-latency, short-range communication (up to 100 meters) for telemetry and basic commands. Operates over the 2.4 GHz ISM band with SPI communication to the ESP32.
TS832 (FPV Module): Transmits real-time analog video feed from the onboard camera to the base station via the 5.8 GHz band. Provides live situational awareness for monitoring or manual intervention.

Communication Architecture: Raspberry Pi 5 processes sensor and video data and interfaces with TS832 for transmission. ESP32 handles command/data transmission using NRF24L01.









































Software Architecture
The software architecture of the autonomous rover is built on a modular and scalable framework using the Robot Operating System 2 (ROS2), operating on Ubuntu 22.04. This architecture integrates multiple computational tools, libraries, and custom algorithms to enable autonomous navigation, environment mapping, and object detection.

1. Operating System
Platform Used: Linux – Ubuntu 22.04 LTS
Provides a stable and compatible environment for running ROS2, handling hardware interfaces, and executing computational tasks in real time.

2. Robot Operating System (ROS2)
ROS2 serves as the core framework that connects hardware and software components, ensuring real-time communication, sensor integration, and system orchestration. All autonomy features are developed and managed under this middleware.

3. Key ROS2 Tools and Packages
a. TF (Transforms)
Maintains and synchronizes coordinate frames between the rover’s body and sensors (e.g., LiDAR, IMU, Camera). Ensures accurate spatial relationships for motion control and mapping.

b. URDF (Unified Robot Description Format)
An XML-based file that defines the physical configuration of the rover, including joints, links, and sensors.
Essential for simulating the robot in Gazebo and for controlling its movement in the real world.

c. Odometry
Estimates the current position and orientation of the rover by integrating motion data from encoders and IMU.
Critical for localization and trajectory planning.

d. Footprint and Cost Map Generation
Defines the physical footprint of the rover in the local and global cost maps. Enables safe path planning around obstacles by maintaining collision-free zones.

e. NAV2 Stack
The NAV2 (Navigation 2) stack handles autonomous path planning and motion control: navigation_params.yaml: Configuration file for tuning planner and controller parameters.

Local Planner: nav2_dwa_planner generates short-term motion plans considering dynamic obstacles.
Global Planner: nav2_navfn_planner creates an optimal path from start to goal.

Recovery Behaviors: Allows the rover to recover from failures like getting stuck.

Controller Plugins: Execute motion plans by generating velocity commands.

4. OpenCV Integration
Used for real-time object detection and classification based on colour, shape, and size. Supports autonomous decision-making for tasks like obstacle recognition and path adjustments.

5. Algorithmic Framework

a. Autonomous Navigation
Initialize ROS2 and load the environmental map. Set the initial pose using AMCL (Adaptive Monte Carlo Localization). Define a target goal position. The global planner computes a path to the goal. The local planner refines the path for real-time motion. The controller executes movement commands via ROS topics. Progress is monitored until the goal is reached.

b. Frontier Exploration and Dynamic Mapping
Use AMCL to initialize the robot’s pose on the current map. Detect unexplored areas (frontiers) using the frontier exploration package. Navigate to these frontiers using move base and gather sensor data. Use the Gmapping algorithm to update the local map. Merge new data into the global map via map server. Repeat the process until the entire arena is explored.

c. Return to Home Algorithm
Retrieve the current pose via AMCL. Generate a return path to the initial coordinates. Execute the return using the NAV2 path planner and controller. Terminate navigation upon successful return.













EMERGENCY RESPONSE SYSTEM

Mechanical failure: This failure could happen due to damage in important mechanical parts of the rover due to ob- stacles present in the arena or any other unexpected situations.
Obstacle/Path recognition failure: This problem could happen due to sensor/electronic components failure (i.e. Camera, Lidar, etc.) or due to software-related failures.
Power supply failure: This problem may arise due to battery-related problems or due to inefficient connections of the components.
Communication failure: This problem could occur due to issues in the communication component or due to signal interference.
Software-related failure: This could happen due to an unexpected error in software or a mismatch in the synchronization of software and hardware.
Failure in the stability of the rover: This failure could happen due to M sand present in the arena or obstacles in the arena.
Description of the Response System: Our Emergency Response System is designed to handle different emergencies effectively.

Mechanical Failure
Approach: Continuous monitoring and visual inspections.
Method: Physical inspection by experienced team members.
Reasoning: Direct observation allows the detection of subtle issues not easily captured by automated systems.

Obstacle / Path Recognition Failure
Approach: Utilization of advanced sensors (LIDAR, cameras) for real-time obstacle detection.
Method: Autonomous navigation around obstacles based on sensor data.
Reasoning: Enhances rover autonomy and avoids potential collisions.




Power Supply Failure
Approach: Manual switchover to alternate power sources.
Method: Manually switching to an alternate power source in case of primary power failure.
Reasoning: Ensures uninterrupted rover operations and data collection.

